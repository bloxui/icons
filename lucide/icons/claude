- Goal: Convert a Lucide-style SVG into a Go icon component in package lucide using
github.com/plainkit/blox.
- File: Output to <kebab-name>.go (e.g., a-arrow-down.go).
- Package/import: Start with package lucide and import x "github.com/plainkit/blox".
- Function:
   - Name: Convert the base SVG filename (without extension) from kebab-case to
PascalCase for the exported function (e.g., a-arrow-down → AArrowDown).
   - Signature: func <PascalName>(args ...x.SvgArg) x.Component { ... }
   - Doc comment: // <PascalName> creates a <Human Name> Lucide icon where “Human Name”
is the spaced title of the kebab name (e.g., A Arrow Down).
- Defaults: At the top of the function, create svgArgs := buildLucideArgs("lucide
lucide-<kebab-name>", args). Do not hardcode base attributes; the helper adds:
   - xmlns="http://www.w3.org/2000/svg"
   - width="24", height="24"
   - viewBox="0 0 24 24"
   - fill="none", stroke="currentColor", stroke-width="2"
   - stroke-linecap="round", stroke-linejoin="round"
   - class="lucide lucide-<kebab-name>"
   - These are overridden by any user-provided args.
- Children: Translate each child element inside the source <svg> to a corresponding
x.Child(...) call, preserving order. Append to svgArgs in one append with comma-separated
children.
   - path: x.Child(x.Path(x.D("<d>"), <extra-attrs>...))
   - line: x.Child(x.Line(x.X1("<x1>"), x.Y1("<y1>"), x.X2("<x2>"), x.Y2("<y2>")))
   - polyline/polygon: x.Child(x.Polyline(x.Points("<points>"))) or
x.Child(x.Polygon(x.Points("<points>")))
   - rect: x.Child(x.Rect(x.X("<x>"), x.Y("<y>"), x.Width("<w>"), x.Height("<h>")[,
x.Rx("<rx>")][, x.Ry("<ry>")]))
   - circle: x.Child(x.Circle(x.Cx("<cx>"), x.Cy("<cy>"), x.R("<r>")))
   - ellipse: x.Child(x.Ellipse(x.Cx("<cx>"), x.Cy("<cy>"), x.Rx("<rx>"), x.Ry("<ry>")))
   - For arcs or complex shapes, keep them in path d as-is.
- Attribute handling:
   - Omit from children any attributes that duplicate the defaults already added via
buildLucideArgs: xmlns, width, height, viewBox, fill="none", stroke="currentColor",
stroke-width="2", stroke-linecap="round", stroke-linejoin="round", and class.
   - Preserve and map meaningful per-element attributes (if present): transform,
opacity, fill, stroke, stroke-width, stroke-linecap, stroke-linejoin, stroke-miterlimit,
fill-rule, clip-rule. Use the corresponding x.* attribute helpers when available (e.g.,
x.Transform("..."), x.Opacity("..."), x.Fill("..."), etc.). If an attribute isn’t
supported by a helper, omit it.
   - Keep the path d and points values exactly, but trim superfluous whitespace.
Preserve command and coordinate casing.
- Return: return x.Svg(svgArgs...).
- Formatting:
   - Use the same structure and style as house.go and a-arrow-down.go.
   - Group all children inside a single append to svgArgs with trailing comma style as
in examples.
- Validation checklist:
   - File name matches input kebab name.
   - Function is exported PascalCase and doc comment matches.
   - buildLucideArgs("lucide lucide-<kebab-name>", args) is used.
   - All SVG children are represented in order as x.Child(...).
   - No duplicate default attributes are added.
   - Returns x.Svg(svgArgs...).
   - Builds with go build in this module.

Example

- Input SVG:
   - <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0
24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
stroke-linejoin="round" class="lucide lucide-house"><path d="M15 21v-8a1 1 0 0 0-1-1h-4a1
1 0 0 0-1 1v8"/><path d="M3 10a2 2 0 0 1 .709-1.528l7-6a2 2 0 0 1 2.582 0l7 6A2 2 0 0 1
21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/></svg>
- Output house.go:
   - package lucide
   - import x "github.com/plainkit/blox"
   - func House(args ...x.SvgArg) x.Component {
   -   svgArgs := buildLucideArgs("lucide lucide-house", args)
   -   svgArgs = append(svgArgs,
   -     x.Child(x.Path(x.D("M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8"))),
   -     x.Child(x.Path(x.D("M3 10a2 2 0 0 1 .709-1.528l7-6a2 2 0 0 1 2.582 0l7 6A2 2 0
0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"))),
   -   )
   -   return x.Svg(svgArgs...)
   - }


User Input
Icon name: images.svg
Icon SVG:
<svg
  xmlns="http://www.w3.org/2000/svg"
  width="24"
  height="24"
  viewBox="0 0 24 24"
  fill="none"
  stroke="currentColor"
  stroke-width="2"
  stroke-linecap="round"
  stroke-linejoin="round"
>
  <path d="m22 11-1.296-1.296a2.4 2.4 0 0 0-3.408 0L11 16" />
  <path d="M4 8a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2" />
  <circle cx="13" cy="7" r="1" fill="currentColor" />
  <rect x="8" y="2" width="14" height="14" rx="2" />
</svg>

